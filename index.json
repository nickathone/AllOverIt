{
  "api/AllOverIt.Reflection.BindingOptions.html": {
    "href": "api/AllOverIt.Reflection.BindingOptions.html",
    "title": "Enum BindingOptions | AllOverIt",
    "keywords": "Enum BindingOptions Namespace : AllOverIt.Reflection Assembly : AllOverIt.dll Syntax [Flags] public enum BindingOptions Fields Name Description Abstract Filter reflection operations to abstract access. All Filter reflection operations to use AllScope scope, AllAccessor access, and AllVisibility visibility. AllAccessor Filter reflection operations to abstract , virtual , or non-virtual access. AllScope Filter reflection operations to static or instance scope. AllVisibility Filter reflection operations to public , protected , private , or internal access. Default Filter reflection operations to use DefaultScope scope, DefaultAccessor access, and DefaultVisibility visibility. DefaultAccessor Filter reflection operations to abstract , virtual , or non-virtual access. DefaultScope Filter reflection operations to static or instance scope. DefaultVisibility Filter reflection operations to public or protected access. Instance Filter reflection operations to instance (non-static) scope. Internal Filter reflection operations to internal visibility. NonVirtual Filter reflection operations to a non-virtual access. Private Filter reflection operations to private visibility. Protected Filter reflection operations to protected visibility. Public Filter reflection operations to public visibility. Static Filter reflection operations to static scope. Virtual Filter reflection operations to virtual access. Extension Methods ObjectExtensions.ToPropertyDictionary(Boolean, BindingOptions) ObjectExtensions.IsIntegral() ObjectExtensions.As<TType>(TType) ObjectExtensions.AsNullable<TType>(Nullable<TType>) ObjectExtensions.CalculateHashCode<BindingOptions>(IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<BindingOptions>(Func<BindingOptions, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.ExpressionInfoType.html": {
    "href": "api/AllOverIt.Expressions.Info.ExpressionInfoType.html",
    "title": "Enum ExpressionInfoType | AllOverIt",
    "keywords": "Enum ExpressionInfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax [Flags] public enum ExpressionInfoType Fields Name Description BinaryComparison Conditional Constant Field MemberInit MethodCall New Property Extension Methods ObjectExtensions.ToPropertyDictionary(Boolean, BindingOptions) ObjectExtensions.IsIntegral() ObjectExtensions.As<TType>(TType) ObjectExtensions.AsNullable<TType>(Nullable<TType>) ObjectExtensions.CalculateHashCode<ExpressionInfoType>(IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<ExpressionInfoType>(Func<ExpressionInfoType, Object>[])"
  },
  "api/AllOverIt.Expressions.PredicateBuilder.html": {
    "href": "api/AllOverIt.Expressions.PredicateBuilder.html",
    "title": "Class PredicateBuilder | AllOverIt",
    "keywords": "Class PredicateBuilder Inheritance System.Object PredicateBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public static class PredicateBuilder Methods And<TType>(Expression<Func<TType, Boolean>>, Expression<Func<TType, Boolean>>) Declaration public static Expression<Func<TType, bool>> And<TType>(this Expression<Func<TType, bool>> expression1, Expression<Func<TType, bool>> expression2) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> expression1 System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> expression2 Returns Type Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> Type Parameters Name Description TType False<TType>() Declaration public static Expression<Func<TType, bool>> False<TType>() Returns Type Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> Type Parameters Name Description TType Not<TType>(Expression<Func<TType, Boolean>>) Declaration public static Expression<Func<TType, bool>> Not<TType>(this Expression<Func<TType, bool>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> expression Returns Type Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> Type Parameters Name Description TType Or<TType>(Expression<Func<TType, Boolean>>, Expression<Func<TType, Boolean>>) Declaration public static Expression<Func<TType, bool>> Or<TType>(this Expression<Func<TType, bool>> expression1, Expression<Func<TType, bool>> expression2) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> expression1 System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> expression2 Returns Type Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> Type Parameters Name Description TType True<TType>() Declaration public static Expression<Func<TType, bool>> True<TType>() Returns Type Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> Type Parameters Name Description TType Where<TType>(Boolean) Declaration public static Expression<Func<TType, bool>> Where<TType>(bool initialState) Parameters Type Name Description System.Boolean initialState Returns Type Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> Type Parameters Name Description TType Where<TType>(Expression<Func<TType, Boolean>>) Declaration public static Expression<Func<TType, bool>> Where<TType>(Expression<Func<TType, bool>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> expression Returns Type Description System.Linq.Expressions.Expression < System.Func <TType, System.Boolean >> Type Parameters Name Description TType"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "AllOverIt | AllOverIt",
    "keywords": "AllOverIt The documentation in this section has been auto-generated from comments in the source code, available from GitHub ."
  },
  "api/AllOverIt.Extensions.ExpressionExtensions.html": {
    "href": "api/AllOverIt.Extensions.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions | AllOverIt",
    "keywords": "Class ExpressionExtensions Inheritance System.Object ExpressionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class ExpressionExtensions Methods GetValue(Expression) Declaration public static object GetValue(this Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression Returns Type Description System.Object GetValues(IEnumerable<Expression>) Declaration public static IEnumerable<object> GetValues(this IEnumerable<Expression> expressions) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Linq.Expressions.Expression > expressions Returns Type Description System.Collections.Generic.IEnumerable < System.Object > RemoveUnary(Expression) Declaration public static Expression RemoveUnary(this Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression Returns Type Description System.Linq.Expressions.Expression"
  },
  "api/AllOverIt.Expressions.html": {
    "href": "api/AllOverIt.Expressions.html",
    "title": "Namespace AllOverIt.Expressions | AllOverIt",
    "keywords": "Namespace AllOverIt.Expressions Classes ExpressionParser ParameterRebinder PredicateBuilder Interfaces IExpressionParser IExpressionValue"
  },
  "api/AllOverIt.Helpers.EnumHelper.html": {
    "href": "api/AllOverIt.Helpers.EnumHelper.html",
    "title": "Class EnumHelper | AllOverIt",
    "keywords": "Class EnumHelper Provides static, general purpose, methods related to using Enums. Inheritance System.Object EnumHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Helpers Assembly : AllOverIt.dll Syntax public static class EnumHelper Methods GetEnumValues<TType>() Returns all possible enum values. Declaration public static IReadOnlyCollection<TType> GetEnumValues<TType>() where TType : struct, Enum Returns Type Description System.Collections.Generic.IReadOnlyCollection <TType> All possible enum values. Type Parameters Name Description TType The Enum type."
  },
  "api/AllOverIt.Extensions.PropertyInfoExtensions.html": {
    "href": "api/AllOverIt.Extensions.PropertyInfoExtensions.html",
    "title": "Class PropertyInfoExtensions | AllOverIt",
    "keywords": "Class PropertyInfoExtensions Inheritance System.Object PropertyInfoExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class PropertyInfoExtensions Methods IsAbstract(PropertyInfo) Declaration public static bool IsAbstract(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Boolean IsInternal(PropertyInfo) Declaration public static bool IsInternal(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Boolean IsPrivate(PropertyInfo) Declaration public static bool IsPrivate(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Boolean IsProtected(PropertyInfo) Declaration public static bool IsProtected(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Boolean IsPublic(PropertyInfo) Declaration public static bool IsPublic(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Boolean IsStatic(PropertyInfo) Declaration public static bool IsStatic(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Boolean IsVirtual(PropertyInfo) Declaration public static bool IsVirtual(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Boolean"
  },
  "api/AllOverIt.Extensions.ComparableExtensions.html": {
    "href": "api/AllOverIt.Extensions.ComparableExtensions.html",
    "title": "Class ComparableExtensions | AllOverIt",
    "keywords": "Class ComparableExtensions Inheritance System.Object ComparableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class ComparableExtensions Methods EqualTo<TType>(IComparable<TType>, TType) Declaration public static bool EqualTo<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description System.IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType GreaterThan<TType>(IComparable<TType>, TType) Declaration public static bool GreaterThan<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description System.IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType GreaterThanOrEqual<TType>(IComparable<TType>, TType) Declaration public static bool GreaterThanOrEqual<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description System.IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType LessThan<TType>(IComparable<TType>, TType) Declaration public static bool LessThan<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description System.IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType LessThanOrEqual<TType>(IComparable<TType>, TType) Declaration public static bool LessThanOrEqual<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description System.IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType NotEqualTo<TType>(IComparable<TType>, TType) Declaration public static bool NotEqualTo<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description System.IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType"
  },
  "api/AllOverIt.Expressions.Exceptions.html": {
    "href": "api/AllOverIt.Expressions.Exceptions.html",
    "title": "Namespace AllOverIt.Expressions.Exceptions | AllOverIt",
    "keywords": "Namespace AllOverIt.Expressions.Exceptions Classes ExpressionParserException"
  },
  "api/AllOverIt.Reflection.ReflectionHelper.html": {
    "href": "api/AllOverIt.Reflection.ReflectionHelper.html",
    "title": "Class ReflectionHelper | AllOverIt",
    "keywords": "Class ReflectionHelper Inheritance System.Object ReflectionHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Reflection Assembly : AllOverIt.dll Syntax public static class ReflectionHelper Methods GetMethodInfo<TType>(BindingOptions, Boolean) Gets System.Reflection.MethodInfo (method metadata) for a given and binding option. Declaration public static IEnumerable<MethodInfo> GetMethodInfo<TType>(BindingOptions binding = BindingOptions.Static | BindingOptions.Instance | BindingOptions.Abstract | BindingOptions.Virtual | BindingOptions.NonVirtual | BindingOptions.Protected | BindingOptions.Public | BindingOptions.DefaultScope | BindingOptions.DefaultAccessor | BindingOptions.DefaultVisibility | BindingOptions.Default | BindingOptions.AllScope | BindingOptions.AllAccessor, bool declaredOnly = false) Parameters Type Name Description BindingOptions binding The binding option that determines the scope, access, and visibility rules to apply when searching for the metadata. System.Boolean declaredOnly If true, the metadata of properties in the declared class as well as base class(es) are returned. If false, only method metadata of the declared type is returned. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.MethodInfo > The method metadata, as System.Reflection.MethodInfo , of a provided . Type Parameters Name Description TType The type to obtain method metadata for. Remarks When class inheritance is involved, this method returns the first method found, starting at the type represented by . GetPropertyInfo<TType>(BindingOptions, Boolean) Gets System.Reflection.PropertyInfo (property metadata) for a given and binding option. Declaration public static IEnumerable<PropertyInfo> GetPropertyInfo<TType>(BindingOptions binding = BindingOptions.Static | BindingOptions.Instance | BindingOptions.Abstract | BindingOptions.Virtual | BindingOptions.NonVirtual | BindingOptions.Protected | BindingOptions.Public | BindingOptions.DefaultScope | BindingOptions.DefaultAccessor | BindingOptions.DefaultVisibility | BindingOptions.Default | BindingOptions.AllScope | BindingOptions.AllAccessor, bool declaredOnly = false) Parameters Type Name Description BindingOptions binding The binding option that determines the scope, access, and visibility rules to apply when searching for the metadata. System.Boolean declaredOnly If true, the metadata of properties in the declared class as well as base class(es) are returned. If false, only property metadata of the declared type is returned. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > The property metadata, as System.Reflection.PropertyInfo , of a provided . Type Parameters Name Description TType The type to obtain property metadata for. Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by . GetPropertyInfo<TType>(String) Gets the System.Reflection.PropertyInfo (property metadata) for a given property on a . Declaration public static PropertyInfo GetPropertyInfo<TType>(string propertyName) Parameters Type Name Description System.String propertyName The name of the property to obtain metadata for. Returns Type Description System.Reflection.PropertyInfo The property metadata, as System.Reflection.PropertyInfo , of a specified property on the specified . Type Parameters Name Description TType The type to obtain the property metadata from. Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by ."
  },
  "api/AllOverIt.Helpers.Raii-1.html": {
    "href": "api/AllOverIt.Helpers.Raii-1.html",
    "title": "Class Raii<TType> | AllOverIt",
    "keywords": "Class Raii<TType> A strongly-type disposable object implementing the Resource Acquisition Is Initialization idiom. Inheritance System.Object Raii<TType> Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Helpers Assembly : AllOverIt.dll Syntax public class Raii<TType> : IDisposable Type Parameters Name Description TType The type being initialized. Constructors Raii(Func<TType>, Action<TType>) Constructor used to provide the initialization and cleanup actions to be invoked. Declaration public Raii(Func<TType> initialize, Action<TType> cleanUp) Parameters Type Name Description System.Func <TType> initialize The initialization action to invoke at the time of initialization. System.Action <TType> cleanUp The cleanup action to perform when the object is disposed. Properties Context Declaration protected TType Context { get; } Property Value Type Description TType Methods Dispose() This is called when the instance is being disposed. Declaration public void Dispose() Dispose(Boolean) A virtual method that is called at the time of disposal. For this class, the cleanup action provided at the time of construction is invoked. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Is true when the object is being disposed, otherwise false. Implements System.IDisposable Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.ConditionalExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.ConditionalExpressionInfo.html",
    "title": "Class ConditionalExpressionInfo | AllOverIt",
    "keywords": "Class ConditionalExpressionInfo Inheritance System.Object ExpressionInfoBase ConditionalExpressionInfo Implements IExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class ConditionalExpressionInfo : ExpressionInfoBase, IExpressionInfo Constructors ConditionalExpressionInfo(Expression, IExpressionInfo, IExpressionInfo, IExpressionInfo) Declaration public ConditionalExpressionInfo(Expression expression, IExpressionInfo test, IExpressionInfo ifTrue, IExpressionInfo ifFalse) Parameters Type Name Description System.Linq.Expressions.Expression expression IExpressionInfo test IExpressionInfo ifTrue IExpressionInfo ifFalse Properties IfFalse Declaration public IExpressionInfo IfFalse { get; } Property Value Type Description IExpressionInfo IfTrue Declaration public IExpressionInfo IfTrue { get; } Property Value Type Description IExpressionInfo Test Declaration public IExpressionInfo Test { get; } Property Value Type Description IExpressionInfo Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.FieldExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.FieldExpressionInfo.html",
    "title": "Class FieldExpressionInfo | AllOverIt",
    "keywords": "Class FieldExpressionInfo Inheritance System.Object ExpressionInfoBase FieldExpressionInfo Implements IExpressionInfo IExpressionValue INegatableExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class FieldExpressionInfo : ExpressionInfoBase, IExpressionInfo, IExpressionValue, INegatableExpressionInfo Constructors FieldExpressionInfo(Expression, FieldInfo, Object, Boolean) Declaration public FieldExpressionInfo(Expression expression, FieldInfo fieldInfo, object value, bool isNegated) Parameters Type Name Description System.Linq.Expressions.Expression expression System.Reflection.FieldInfo fieldInfo System.Object value System.Boolean isNegated Properties FieldInfo Declaration public FieldInfo FieldInfo { get; } Property Value Type Description System.Reflection.FieldInfo IsNegated Declaration public bool IsNegated { get; } Property Value Type Description System.Boolean Value Declaration public object Value { get; } Property Value Type Description System.Object Implements IExpressionInfo IExpressionValue INegatableExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.ExpressionParser.html": {
    "href": "api/AllOverIt.Expressions.ExpressionParser.html",
    "title": "Class ExpressionParser | AllOverIt",
    "keywords": "Class ExpressionParser Inheritance System.Object ExpressionParser Implements IExpressionParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public sealed class ExpressionParser : IExpressionParser Methods Parse(Expression) Declaration public IExpressionInfo Parse(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression Returns Type Description IExpressionInfo Parse(Expression, ExpressionInfoType) Declaration public IExpressionInfo Parse(Expression expression, ExpressionInfoType filter) Parameters Type Name Description System.Linq.Expressions.Expression expression ExpressionInfoType filter Returns Type Description IExpressionInfo Implements IExpressionParser Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Reflection.html": {
    "href": "api/AllOverIt.Reflection.html",
    "title": "Namespace AllOverIt.Reflection | AllOverIt",
    "keywords": "Namespace AllOverIt.Reflection Classes ReflectionHelper Enums BindingOptions"
  },
  "api/AllOverIt.Expressions.IExpressionParser.html": {
    "href": "api/AllOverIt.Expressions.IExpressionParser.html",
    "title": "Interface IExpressionParser | AllOverIt",
    "keywords": "Interface IExpressionParser Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public interface IExpressionParser Methods Parse(Expression) Declaration IExpressionInfo Parse(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression Returns Type Description IExpressionInfo Parse(Expression, ExpressionInfoType) Declaration IExpressionInfo Parse(Expression expression, ExpressionInfoType filter) Parameters Type Name Description System.Linq.Expressions.Expression expression ExpressionInfoType filter Returns Type Description IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.IExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.IExpressionInfo.html",
    "title": "Interface IExpressionInfo | AllOverIt",
    "keywords": "Interface IExpressionInfo Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public interface IExpressionInfo Properties Expression Declaration Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression InfoType Declaration ExpressionInfoType InfoType { get; } Property Value Type Description ExpressionInfoType Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Extensions.ObjectExtensions.html": {
    "href": "api/AllOverIt.Extensions.ObjectExtensions.html",
    "title": "Class ObjectExtensions | AllOverIt",
    "keywords": "Class ObjectExtensions Inheritance System.Object ObjectExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class ObjectExtensions Properties DefaultHashCodeBindings Specifies the binding options to use when calculating the hash code of an object when using CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) . Declaration public static BindingOptions DefaultHashCodeBindings { get; set; } Property Value Type Description BindingOptions Methods As<TType>(Object, TType) Converts the provided source instance to a specified type. Declaration public static TType As<TType>(this object instance, TType defaultValue = null) Parameters Type Name Description System.Object instance The object instance to be converted. TType defaultValue The default value to be returned when instance is null. Returns Type Description TType Returns instance converted to the specified . Type Parameters Name Description TType The type that instance is to be converted to. AsNullable<TType>(Object, Nullable<TType>) Converts the provided source instance to a specified nullable type. Declaration public static TType? AsNullable<TType>(this object instance, TType? defaultValue = default(TType? )) where TType : struct Parameters Type Name Description System.Object instance The object instance to be converted. System.Nullable <TType> defaultValue The default value to be returned when instance is null. Returns Type Description System.Nullable <TType> Returns instance converted to the specified . Type Parameters Name Description TType The (nullable) type that instance is to be converted to. CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) Declaration public static int CalculateHashCode<TType>(this TType instance, IEnumerable<string> includeProperties = null, IEnumerable<string> excludeProperties = null) Parameters Type Name Description TType instance System.Collections.Generic.IEnumerable < System.String > includeProperties System.Collections.Generic.IEnumerable < System.String > excludeProperties Returns Type Description System.Int32 Type Parameters Name Description TType CalculateHashCode<TType>(TType, Func<TType, Object>[]) Declaration public static int CalculateHashCode<TType>(this TType instance, params Func<TType, object>[] propertyResolvers) Parameters Type Name Description TType instance System.Func <TType, System.Object >[] propertyResolvers Returns Type Description System.Int32 Type Parameters Name Description TType IsIntegral(Object) Determines if the specified object is an integral type (signed or unsigned). Declaration public static bool IsIntegral(this object instance) Parameters Type Name Description System.Object instance The object instance to be compared to an integral type. Returns Type Description System.Boolean Returns true if the specified object is an integral type (signed or unsigned). ToPropertyDictionary(Object, Boolean, BindingOptions) Creates a dictionary containing property names and associated values. Declaration public static IDictionary<string, object> ToPropertyDictionary(this object instance, bool includeNulls = false, BindingOptions bindingOptions = BindingOptions.Static | BindingOptions.Instance | BindingOptions.Abstract | BindingOptions.Virtual | BindingOptions.NonVirtual | BindingOptions.Protected | BindingOptions.Public | BindingOptions.DefaultScope | BindingOptions.DefaultAccessor | BindingOptions.DefaultVisibility | BindingOptions.Default | BindingOptions.AllScope | BindingOptions.AllAccessor) Parameters Type Name Description System.Object instance The object instance to obtain property names and values from. System.Boolean includeNulls If true then null value properties will be returned, otherwise they will be omitted. BindingOptions bindingOptions Binding options that determines how property names are resolved. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > Returns a dictionary containing property names and associated values."
  },
  "api/AllOverIt.Helpers.Raii.html": {
    "href": "api/AllOverIt.Helpers.Raii.html",
    "title": "Class Raii | AllOverIt",
    "keywords": "Class Raii A disposable object implementing the Resource Acquisition Is Initialization idiom. Inheritance System.Object Raii Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Helpers Assembly : AllOverIt.dll Syntax public class Raii : IDisposable Constructors Raii(Action, Action) Constructor used to provide the initialization and cleanup actions to be invoked. Declaration public Raii(Action initialize, Action cleanUp) Parameters Type Name Description System.Action initialize The initialization action to invoke at the time of initialization. System.Action cleanUp The cleanup action to perform when the object is disposed. Methods Dispose() This is called when the instance is being disposed. Declaration public void Dispose() Dispose(Boolean) A virtual method that is called at the time of disposal. For this class, the cleanup action provided at the time of construction is invoked. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Is true when the object is being disposed, otherwise false. Implements System.IDisposable Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.BinaryComparisonExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.BinaryComparisonExpressionInfo.html",
    "title": "Class BinaryComparisonExpressionInfo | AllOverIt",
    "keywords": "Class BinaryComparisonExpressionInfo Inheritance System.Object ExpressionInfoBase BinaryComparisonExpressionInfo Implements IExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class BinaryComparisonExpressionInfo : ExpressionInfoBase, IExpressionInfo Constructors BinaryComparisonExpressionInfo(Expression, IExpressionInfo, IExpressionInfo, ExpressionType) Declaration public BinaryComparisonExpressionInfo(Expression expression, IExpressionInfo left, IExpressionInfo right, ExpressionType operatorType) Parameters Type Name Description System.Linq.Expressions.Expression expression IExpressionInfo left IExpressionInfo right System.Linq.Expressions.ExpressionType operatorType Properties Left Declaration public IExpressionInfo Left { get; } Property Value Type Description IExpressionInfo OperatorType Declaration public ExpressionType OperatorType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Right Declaration public IExpressionInfo Right { get; } Property Value Type Description IExpressionInfo Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.INegatableExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.INegatableExpressionInfo.html",
    "title": "Interface INegatableExpressionInfo | AllOverIt",
    "keywords": "Interface INegatableExpressionInfo Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public interface INegatableExpressionInfo Properties IsNegated Declaration bool IsNegated { get; } Property Value Type Description System.Boolean Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Extensions.TypeExtensions.html": {
    "href": "api/AllOverIt.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | AllOverIt",
    "keywords": "Class TypeExtensions Inheritance System.Object TypeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class TypeExtensions Methods GetFriendlyName(Type) Declaration public static string GetFriendlyName(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.String GetGenericArguments(Type) Declaration public static IEnumerable<Type> GetGenericArguments(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Collections.Generic.IEnumerable < System.Type > GetMethodInfo(Type, BindingOptions, Boolean) Gets System.Reflection.MethodInfo (method metadata) for a given System.Type and binding option. Declaration public static IEnumerable<MethodInfo> GetMethodInfo(this Type type, BindingOptions binding = BindingOptions.Static | BindingOptions.Instance | BindingOptions.Abstract | BindingOptions.Virtual | BindingOptions.NonVirtual | BindingOptions.Protected | BindingOptions.Public | BindingOptions.DefaultScope | BindingOptions.DefaultAccessor | BindingOptions.DefaultVisibility | BindingOptions.Default | BindingOptions.AllScope | BindingOptions.AllAccessor, bool declaredOnly = false) Parameters Type Name Description System.Type type The type to obtain method metadata for. BindingOptions binding The binding option that determines the scope, access, and visibility rules to apply when searching for the metadata. System.Boolean declaredOnly If true, the metadata of properties in the declared class as well as base class(es) are returned. If false, only method metadata of the declared type is returned. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.MethodInfo > The method metadata, as System.Reflection.MethodInfo , of a provided System.Type . Remarks When class inheritance is involved, this method returns the first method found, starting at the type represented by . GetPropertyInfo(Type, BindingOptions, Boolean) Gets System.Reflection.PropertyInfo (property metadata) for a given System.Type and binding option. Declaration public static IEnumerable<PropertyInfo> GetPropertyInfo(this Type type, BindingOptions binding = BindingOptions.Static | BindingOptions.Instance | BindingOptions.Abstract | BindingOptions.Virtual | BindingOptions.NonVirtual | BindingOptions.Protected | BindingOptions.Public | BindingOptions.DefaultScope | BindingOptions.DefaultAccessor | BindingOptions.DefaultVisibility | BindingOptions.Default | BindingOptions.AllScope | BindingOptions.AllAccessor, bool declaredOnly = false) Parameters Type Name Description System.Type type The type to obtain property metadata for. BindingOptions binding The binding option that determines the scope, access, and visibility rules to apply when searching for the metadata. System.Boolean declaredOnly If true, the metadata of properties in the declared class as well as base class(es) are returned. If false, only property metadata of the declared type is returned. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > The property metadata, as System.Reflection.PropertyInfo , of a provided System.Type . Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by . GetPropertyInfo(Type, String) Gets the System.Reflection.PropertyInfo (property metadata) for a given property on a System.Type . Declaration public static PropertyInfo GetPropertyInfo(this Type type, string propertyName) Parameters Type Name Description System.Type type The System.Type to obtain the property metadata from. System.String propertyName The name of the property to obtain metadata for. Returns Type Description System.Reflection.PropertyInfo The property metadata, as System.Reflection.PropertyInfo , of a specified property on the provided . Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by . IsAssignableFromType(Type, Type) Declaration public static bool IsAssignableFromType(this Type type, Type fromType) Parameters Type Name Description System.Type type System.Type fromType Returns Type Description System.Boolean IsClassType(Type) Declaration public static bool IsClassType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean IsEnumerableType(Type, Boolean) Declaration public static bool IsEnumerableType(this Type type, bool includeString = false) Parameters Type Name Description System.Type type System.Boolean includeString Returns Type Description System.Boolean IsEnumType(Type) Declaration public static bool IsEnumType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean IsGenericEnumerableType(Type) Declaration public static bool IsGenericEnumerableType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean IsGenericNullableType(Type) Declaration public static bool IsGenericNullableType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean IsGenericType(Type) Declaration public static bool IsGenericType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean IsIntegralType(Type) Declaration public static bool IsIntegralType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean IsPrimitiveType(Type) Declaration public static bool IsPrimitiveType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean"
  },
  "api/AllOverIt.Expressions.Info.ConstantExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.ConstantExpressionInfo.html",
    "title": "Class ConstantExpressionInfo | AllOverIt",
    "keywords": "Class ConstantExpressionInfo Inheritance System.Object ExpressionInfoBase ConstantExpressionInfo Implements IExpressionInfo IExpressionValue Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class ConstantExpressionInfo : ExpressionInfoBase, IExpressionInfo, IExpressionValue Constructors ConstantExpressionInfo(Expression, Object) Declaration public ConstantExpressionInfo(Expression expression, object value) Parameters Type Name Description System.Linq.Expressions.Expression expression System.Object value Properties Value Declaration public object Value { get; } Property Value Type Description System.Object Implements IExpressionInfo IExpressionValue Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.ExpressionInfoBase.html": {
    "href": "api/AllOverIt.Expressions.Info.ExpressionInfoBase.html",
    "title": "Class ExpressionInfoBase | AllOverIt",
    "keywords": "Class ExpressionInfoBase Inheritance System.Object ExpressionInfoBase BinaryComparisonExpressionInfo ConditionalExpressionInfo ConstantExpressionInfo FieldExpressionInfo MemberInitExpressionInfo MethodCallExpressionInfo NewExpressionInfo PropertyExpressionInfo Implements IExpressionInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public abstract class ExpressionInfoBase : IExpressionInfo Constructors ExpressionInfoBase(Expression, ExpressionInfoType) Declaration protected ExpressionInfoBase(Expression expression, ExpressionInfoType infoType) Parameters Type Name Description System.Linq.Expressions.Expression expression ExpressionInfoType infoType Properties Expression Declaration public Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression InfoType Declaration public ExpressionInfoType InfoType { get; } Property Value Type Description ExpressionInfoType Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Extensions.html": {
    "href": "api/AllOverIt.Extensions.html",
    "title": "Namespace AllOverIt.Extensions | AllOverIt",
    "keywords": "Namespace AllOverIt.Extensions Classes ComparableExtensions DictionaryExtensions DoubleExtensions EnumerableExtensions ExpressionExtensions ObjectExtensions PropertyInfoExtensions StringExtensions TaskUtils TypeExtensions TypeInfoExtensions"
  },
  "api/AllOverIt.Extensions.EnumerableExtensions.html": {
    "href": "api/AllOverIt.Extensions.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | AllOverIt",
    "keywords": "Class EnumerableExtensions Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class EnumerableExtensions Methods AsList<TType>(IEnumerable<TType>) Declaration public static IList<TType> AsList<TType>(this IEnumerable<TType> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <TType> items Returns Type Description System.Collections.Generic.IList <TType> Type Parameters Name Description TType AsReadOnlyList<TType>(IEnumerable<TType>) Declaration public static IReadOnlyList<TType> AsReadOnlyList<TType>(this IEnumerable<TType> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <TType> items Returns Type Description System.Collections.Generic.IReadOnlyList <TType> Type Parameters Name Description TType"
  },
  "api/AllOverIt.Expressions.Info.html": {
    "href": "api/AllOverIt.Expressions.Info.html",
    "title": "Namespace AllOverIt.Expressions.Info | AllOverIt",
    "keywords": "Namespace AllOverIt.Expressions.Info Classes BinaryComparisonExpressionInfo ConditionalExpressionInfo ConstantExpressionInfo ExpressionInfoBase FieldExpressionInfo MemberInitExpressionInfo MethodCallExpressionInfo NewExpressionInfo PropertyExpressionInfo Interfaces IExpressionInfo INegatableExpressionInfo Enums ExpressionInfoType"
  },
  "api/AllOverIt.Extensions.StringExtensions.html": {
    "href": "api/AllOverIt.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | AllOverIt",
    "keywords": "Class StringExtensions Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class StringExtensions Methods As<TType>(String, TType, Boolean) Converts a given string to another type. Declaration public static TType As<TType>(this string value, TType defaultValue = null, bool ignoreCase = true) Parameters Type Name Description System.String value The value to be converted. TType defaultValue The value to return if is null, empty or contains whitespace, or is considered invalid for the TType converter. System.Boolean ignoreCase Indicates if the conversion should ignore case-sensitivity. Returns Type Description TType The converted value, or the value if the conversion cannot be performed. Type Parameters Name Description TType The type to convert to. Remarks Supported conversions include byte, sbyte, decimal, double, float, int, uint, long, ulong, short, ushort, string and enum. Char and Boolean type conversions must be performed using the As<TType>(Object, TType) method. No attempt is made to avoid overflow or argument exceptions. AsNullable<TType>(String, Boolean) Converts a given string to another nullable type. Declaration public static TType? AsNullable<TType>(this string value, bool ignoreCase = true) where TType : struct Parameters Type Name Description System.String value The value to be converted. System.Boolean ignoreCase Indicates if the conversion should ignore case-sensitivity. Returns Type Description System.Nullable <TType> The converted value, or null if the conversion cannot be performed. Type Parameters Name Description TType The nullable type to convert to."
  },
  "api/AllOverIt.Extensions.DoubleExtensions.html": {
    "href": "api/AllOverIt.Extensions.DoubleExtensions.html",
    "title": "Class DoubleExtensions | AllOverIt",
    "keywords": "Class DoubleExtensions Inheritance System.Object DoubleExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class DoubleExtensions Methods IsEqualTo(Double, Double) Declaration public static bool IsEqualTo(this double lhs, double rhs) Parameters Type Name Description System.Double lhs System.Double rhs Returns Type Description System.Boolean IsZero(Double) Declaration public static bool IsZero(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean"
  },
  "api/AllOverIt.Extensions.TypeInfoExtensions.html": {
    "href": "api/AllOverIt.Extensions.TypeInfoExtensions.html",
    "title": "Class TypeInfoExtensions | AllOverIt",
    "keywords": "Class TypeInfoExtensions Inheritance System.Object TypeInfoExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class TypeInfoExtensions Methods GetPropertyInfo(TypeInfo, Boolean) Gets all System.Reflection.PropertyInfo (property metadata) for a given System.Reflection.TypeInfo . Declaration public static IEnumerable<PropertyInfo> GetPropertyInfo(this TypeInfo typeInfo, bool declaredOnly = false) Parameters Type Name Description System.Reflection.TypeInfo typeInfo The System.Reflection.TypeInfo to obtain all property metadata. System.Boolean declaredOnly If true, the metadata of properties in the declared class as well as base class(es) are returned. If false, only property metadata of the declared type is returned. Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > The property metadata, as System.Reflection.PropertyInfo , of a provided System.Reflection.TypeInfo . Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by . GetPropertyInfo(TypeInfo, String) Gets the System.Reflection.PropertyInfo (property metadata) for a given property on a System.Reflection.TypeInfo . Declaration public static PropertyInfo GetPropertyInfo(this TypeInfo typeInfo, string propertyName) Parameters Type Name Description System.Reflection.TypeInfo typeInfo The System.Reflection.TypeInfo to obtain the property metadata from. System.String propertyName The name of the property to obtain metadata for. Returns Type Description System.Reflection.PropertyInfo The property metadata, as System.Reflection.PropertyInfo , of a specified property on the provided . Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by ."
  },
  "api/AllOverIt.Expressions.ParameterRebinder.html": {
    "href": "api/AllOverIt.Expressions.ParameterRebinder.html",
    "title": "Class ParameterRebinder | AllOverIt",
    "keywords": "Class ParameterRebinder Inheritance System.Object System.Linq.Expressions.ExpressionVisitor ParameterRebinder Inherited Members System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>) System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression) System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>) System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, System.String) System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String) System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression) System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression) System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock) System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression) System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression) System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression) System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression) System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression) System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit) System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression) System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression) System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression) System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression) System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression) System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>) System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression) System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression) System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression) System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment) System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding) System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression) System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding) System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding) System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression) System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression) System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression) System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression) System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase) System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression) System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression) System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public class ParameterRebinder : ExpressionVisitor Methods ReplaceParameters(IDictionary<ParameterExpression, ParameterExpression>, Expression) Replaces parameter expressions in a lambda expression with alternate parameter expressions in the provided mapping. Declaration public static Expression ReplaceParameters(IDictionary<ParameterExpression, ParameterExpression> parameterMap, Expression expression) Parameters Type Name Description System.Collections.Generic.IDictionary < System.Linq.Expressions.ParameterExpression , System.Linq.Expressions.ParameterExpression > parameterMap Contains the mapping of parameter expressions to replace in the provided lambda expression. System.Linq.Expressions.Expression expression The lambda expression to have its parameter expressions replaced. Returns Type Description System.Linq.Expressions.Expression A new expression with the parameter expressions replaced. VisitParameter(ParameterExpression) Declaration protected override Expression VisitParameter(ParameterExpression parameter) Parameters Type Name Description System.Linq.Expressions.ParameterExpression parameter Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression) Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.MemberInitExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.MemberInitExpressionInfo.html",
    "title": "Class MemberInitExpressionInfo | AllOverIt",
    "keywords": "Class MemberInitExpressionInfo Inheritance System.Object ExpressionInfoBase MemberInitExpressionInfo Implements IExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class MemberInitExpressionInfo : ExpressionInfoBase, IExpressionInfo Constructors MemberInitExpressionInfo(Expression, IEnumerable<IExpressionInfo>, IEnumerable<IExpressionInfo>) Declaration public MemberInitExpressionInfo(Expression expression, IEnumerable<IExpressionInfo> bindings, IEnumerable<IExpressionInfo> arguments) Parameters Type Name Description System.Linq.Expressions.Expression expression System.Collections.Generic.IEnumerable < IExpressionInfo > bindings System.Collections.Generic.IEnumerable < IExpressionInfo > arguments Properties Arguments Declaration public IReadOnlyList<IExpressionInfo> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IExpressionInfo > Bindings Declaration public IReadOnlyList<IExpressionInfo> Bindings { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IExpressionInfo > Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.PropertyExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.PropertyExpressionInfo.html",
    "title": "Class PropertyExpressionInfo | AllOverIt",
    "keywords": "Class PropertyExpressionInfo Inheritance System.Object ExpressionInfoBase PropertyExpressionInfo Implements IExpressionInfo IExpressionValue INegatableExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class PropertyExpressionInfo : ExpressionInfoBase, IExpressionInfo, IExpressionValue, INegatableExpressionInfo Constructors PropertyExpressionInfo(Expression, PropertyInfo, Object, Boolean) Declaration public PropertyExpressionInfo(Expression expression, PropertyInfo propertyInfo, object value, bool isNegated) Parameters Type Name Description System.Linq.Expressions.Expression expression System.Reflection.PropertyInfo propertyInfo System.Object value System.Boolean isNegated Properties IsNegated Declaration public bool IsNegated { get; } Property Value Type Description System.Boolean PropertyInfo Declaration public PropertyInfo PropertyInfo { get; } Property Value Type Description System.Reflection.PropertyInfo Value Declaration public object Value { get; } Property Value Type Description System.Object Implements IExpressionInfo IExpressionValue INegatableExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Tasks.AsyncLazy-1.html": {
    "href": "api/AllOverIt.Tasks.AsyncLazy-1.html",
    "title": "Class AsyncLazy<TType> | AllOverIt",
    "keywords": "Class AsyncLazy<TType> Provides support for lazy initialization using a factory that returns a Task{TType}. Inheritance System.Object System.Lazy < System.Threading.Tasks.Task <TType>> AsyncLazy<TType> Inherited Members System.Lazy<System.Threading.Tasks.Task<TType>>.ToString() System.Lazy<System.Threading.Tasks.Task<TType>>.IsValueCreated System.Lazy<System.Threading.Tasks.Task<TType>>.Value System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AllOverIt.Tasks Assembly : AllOverIt.dll Syntax public class AsyncLazy<TType> : Lazy<Task<TType>> Type Parameters Name Description TType The type that is lazily initialized. Constructors AsyncLazy(Func<TType>) Initializes a new instance of the AsyncLazy{TType} class. When lazy initialization occurs, the specified initialization factory is executed asynchronously. Declaration public AsyncLazy(Func<TType> factory) Parameters Type Name Description System.Func <TType> factory The factory used for lazy initialization of the stored value. AsyncLazy(Func<Task<TType>>) Initializes a new instance of the AsyncLazy{TType} class. When lazy initialization occurs, the specified initialization factory is executed asynchronously. Declaration public AsyncLazy(Func<Task<TType>> factory) Parameters Type Name Description System.Func < System.Threading.Tasks.Task <TType>> factory The factory used for lazy initialization of the stored value. Methods GetAwaiter() Gets an awaiter that allows for 'await lazyProp' instead of 'await lazyProp.Value' Declaration public TaskAwaiter<TType> GetAwaiter() Returns Type Description System.Runtime.CompilerServices.TaskAwaiter <TType> An awaiter for the value being initialized. Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Exceptions.ExpressionParserException.html": {
    "href": "api/AllOverIt.Expressions.Exceptions.ExpressionParserException.html",
    "title": "Class ExpressionParserException | AllOverIt",
    "keywords": "Class ExpressionParserException Inheritance System.Object System.Exception ExpressionParserException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AllOverIt.Expressions.Exceptions Assembly : AllOverIt.dll Syntax [Serializable] public sealed class ExpressionParserException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.IExpressionValue.html": {
    "href": "api/AllOverIt.Expressions.IExpressionValue.html",
    "title": "Interface IExpressionValue | AllOverIt",
    "keywords": "Interface IExpressionValue Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public interface IExpressionValue Properties Value Declaration object Value { get; } Property Value Type Description System.Object Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Extensions.DictionaryExtensions.html": {
    "href": "api/AllOverIt.Extensions.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | AllOverIt",
    "keywords": "Class DictionaryExtensions Inheritance System.Object DictionaryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class DictionaryExtensions Methods GetOrSet<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) Declaration public static TValue GetOrSet<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TValue> valueCreator) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary TKey key System.Func <TValue> valueCreator Returns Type Description TValue Type Parameters Name Description TKey TValue GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue = null) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary TKey key TValue defaultValue Returns Type Description TValue Type Parameters Name Description TKey TValue"
  },
  "api/AllOverIt.Expressions.Info.MethodCallExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.MethodCallExpressionInfo.html",
    "title": "Class MethodCallExpressionInfo | AllOverIt",
    "keywords": "Class MethodCallExpressionInfo Inheritance System.Object ExpressionInfoBase MethodCallExpressionInfo Implements IExpressionInfo INegatableExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class MethodCallExpressionInfo : ExpressionInfoBase, IExpressionInfo, INegatableExpressionInfo Constructors MethodCallExpressionInfo(Expression, IExpressionInfo, MethodInfo, IEnumerable<IExpressionInfo>, Boolean) Declaration public MethodCallExpressionInfo(Expression expression, IExpressionInfo object, MethodInfo methodInfo, IEnumerable<IExpressionInfo> parameters, bool isNegated) Parameters Type Name Description System.Linq.Expressions.Expression expression IExpressionInfo object System.Reflection.MethodInfo methodInfo System.Collections.Generic.IEnumerable < IExpressionInfo > parameters System.Boolean isNegated Properties IsNegated Declaration public bool IsNegated { get; } Property Value Type Description System.Boolean MethodInfo Declaration public MethodInfo MethodInfo { get; } Property Value Type Description System.Reflection.MethodInfo Object Declaration public IExpressionInfo Object { get; } Property Value Type Description IExpressionInfo Parameters Declaration public IEnumerable<IExpressionInfo> Parameters { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IExpressionInfo > Implements IExpressionInfo INegatableExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.NewExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.NewExpressionInfo.html",
    "title": "Class NewExpressionInfo | AllOverIt",
    "keywords": "Class NewExpressionInfo Inheritance System.Object ExpressionInfoBase NewExpressionInfo Implements IExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class NewExpressionInfo : ExpressionInfoBase, IExpressionInfo Constructors NewExpressionInfo(Expression, IEnumerable<IExpressionInfo>) Declaration public NewExpressionInfo(Expression expression, IEnumerable<IExpressionInfo> arguments) Parameters Type Name Description System.Linq.Expressions.Expression expression System.Collections.Generic.IEnumerable < IExpressionInfo > arguments Properties Arguments Declaration public IReadOnlyList<IExpressionInfo> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IExpressionInfo > Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Tasks.html": {
    "href": "api/AllOverIt.Tasks.html",
    "title": "Namespace AllOverIt.Tasks | AllOverIt",
    "keywords": "Namespace AllOverIt.Tasks Classes AsyncLazy<TType> Provides support for lazy initialization using a factory that returns a Task{TType}."
  },
  "api/AllOverIt.Helpers.html": {
    "href": "api/AllOverIt.Helpers.html",
    "title": "Namespace AllOverIt.Helpers | AllOverIt",
    "keywords": "Namespace AllOverIt.Helpers Classes EnumHelper Provides static, general purpose, methods related to using Enums. Raii A disposable object implementing the Resource Acquisition Is Initialization idiom. Raii<TType> A strongly-type disposable object implementing the Resource Acquisition Is Initialization idiom."
  },
  "api/AllOverIt.Extensions.TaskUtils.html": {
    "href": "api/AllOverIt.Extensions.TaskUtils.html",
    "title": "Class TaskUtils | AllOverIt",
    "keywords": "Class TaskUtils Inheritance System.Object TaskUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class TaskUtils Methods WhenAll<T1, T2>(Task<T1>, Task<T2>) Declaration public static Task<(T1, T2)> WhenAll<T1, T2>(Task<T1> task1, Task<T2> task2) Parameters Type Name Description System.Threading.Tasks.Task <T1> task1 System.Threading.Tasks.Task <T2> task2 Returns Type Description System.Threading.Tasks.Task < System.ValueTuple <T1, T2>> Type Parameters Name Description T1 T2 WhenAll<T1, T2, T3>(Task<T1>, Task<T2>, Task<T3>) Declaration public static Task<(T1, T2, T3)> WhenAll<T1, T2, T3>(Task<T1> task1, Task<T2> task2, Task<T3> task3) Parameters Type Name Description System.Threading.Tasks.Task <T1> task1 System.Threading.Tasks.Task <T2> task2 System.Threading.Tasks.Task <T3> task3 Returns Type Description System.Threading.Tasks.Task < System.ValueTuple <T1, T2, T3>> Type Parameters Name Description T1 T2 T3 WhenAll<T1, T2, T3, T4>(Task<T1>, Task<T2>, Task<T3>, Task<T4>) Declaration public static Task<(T1, T2, T3, T4)> WhenAll<T1, T2, T3, T4>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4) Parameters Type Name Description System.Threading.Tasks.Task <T1> task1 System.Threading.Tasks.Task <T2> task2 System.Threading.Tasks.Task <T3> task3 System.Threading.Tasks.Task <T4> task4 Returns Type Description System.Threading.Tasks.Task < System.ValueTuple <T1, T2, T3, T4>> Type Parameters Name Description T1 T2 T3 T4 WhenAll<T1, T2, T3, T4, T5>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>) Declaration public static Task<(T1, T2, T3, T4, T5)> WhenAll<T1, T2, T3, T4, T5>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5) Parameters Type Name Description System.Threading.Tasks.Task <T1> task1 System.Threading.Tasks.Task <T2> task2 System.Threading.Tasks.Task <T3> task3 System.Threading.Tasks.Task <T4> task4 System.Threading.Tasks.Task <T5> task5 Returns Type Description System.Threading.Tasks.Task < System.ValueTuple <T1, T2, T3, T4, T5>> Type Parameters Name Description T1 T2 T3 T4 T5"
  },
  "library/docs/expressions.html": {
    "href": "library/docs/expressions.html",
    "title": "Expressions | AllOverIt",
    "keywords": "Expressions"
  },
  "library/about/whoami.html": {
    "href": "library/about/whoami.html",
    "title": "Who Am I? | AllOverIt",
    "keywords": "Who Am I? Follow @_mjfreelancing My name is Malcolm Smith and live just a few hours drive North of Sydney, Australia. I currently work as a full time C# developer using Visual Studio but also: have a strong background in C++ co-authored the C++Builder 5 Developers Guide (2000) contributed, as Chief Editor, to the C++ Builder Developers Journal (2004-2015). I am very passionate about coding to best practices using SOLID principles and strive for 100% code coverage in unit tests. In my spare time I enjoy SCUBA diving and landscape / nature photography. You can review some of my work at www.mjsmithphotography.com and on my Instagram account."
  },
  "library/about/versioning.html": {
    "href": "library/about/versioning.html",
    "title": "Versioning | AllOverIt",
    "keywords": "Versioning The version numbers of AllOverIt comply with Semantic Versioning . Given a version number in the format Major . Minor . Patch , then: A change in the Major version number indicates incompatible API changes A change in the Minor version number indicates new functionality and/or backward compatible changes A change in the Patch version number indicates backward compatible bug fixes"
  },
  "library/about/dependencies.html": {
    "href": "library/about/dependencies.html",
    "title": "Dependencies | AllOverIt",
    "keywords": "Dependencies AllOverIt relies only on NETStandard.Library , version 2.03."
  },
  "library/docs/utilities.html": {
    "href": "library/docs/utilities.html",
    "title": "Utilities | AllOverIt",
    "keywords": "Utilities"
  },
  "library/docs/extensions.html": {
    "href": "library/docs/extensions.html",
    "title": "Extension Methods | AllOverIt",
    "keywords": "Extension Methods"
  },
  "library/docs/intro.html": {
    "href": "library/docs/intro.html",
    "title": "Introduction | AllOverIt",
    "keywords": "Introduction There's a large number of commonly used routines that get used from one application to the next. AllOverIt is a collection of those routines, backed by an extensive set of unit tests. A goal of AllOverIt is to require nothing more than .NET Standard. There are a handful of classes that have been inspired by the work of others (with credit provided in the source) but everything is ultimately tweaked or enhanced to meet the needs of this library. The entire library is unit tested and aims to continue meeting 100% coverage."
  },
  "index.html": {
    "href": "index.html",
    "title": "AllOverIt | AllOverIt",
    "keywords": "AllOverIt A general purpose .NET Standard 2.0 library containing a variety of classes, utilities, and helpers to fill in regularly occuring software development gaps. The Library section of this site provides examples of usage for some of the more core features available, while the Api Documentation section provides more specific information for each of the classes and utilities available. Quick Links Reflection with flexible binding options Reflection is a powerful tool but it can often be difficult to remember the syntax required to discover properties and methods of a class type or instance. AllOverIt provides a variety of extension and utility methods to simplify the experience. See Reflection for more details. Expressions AllOverIt includes an expression parser that caters for the majority of most programmer needs. This includes things such as obtaining field and property names or values from an expression, or building a predicate expression that can be compiled and re-used. See Expressions for more details. Extension methods AllOverIt includes a variety of extension methods to simplify working with strings, dictionaries, doubles, objects, types, tasks, amd more. See Extension Methods for more details. Utilities and Helpers AllOverIt also contains a number of general-purpose utilities. See Utilities for more details."
  },
  "library/docs/reflection.html": {
    "href": "library/docs/reflection.html",
    "title": "Reflection | AllOverIt",
    "keywords": "Reflection Reflection provides the ability to dynamically create instances of a type, get the type of an existing object and invoke its methods or access its properties. AllOverIt simplifies the access to an object's set of properties and methods by using a set of binding options. Binding Options To simplify the explanation of using reflection binding options, consider the following class: public class SomeClass { public int Prop1 { get; set; } private int Prop2 { get; set; } internal int Prop3 { get; set; } internal int Prop4 { get; private set; } public static bool Prop5 { get; set; } } This class contains a number of properaties that exhibit three categories of binding options: Option Description Scope Refers to whether a property or method is static or instance. Accessor Refers to whether a property or method is virtual, non-virtual, or abstract. Visibility Refers to whether a property or method is public, protected, private, or internal. When querying for properties and methods the binding must include at least one option from each of the three categories. Where a category option has not been provided then the following defaults will be applied: Option Default Applied Scope Static or instance Accessor Virtual, non-virtual, or abstract. Visibility Public or protected. There are also a number of options defined that provide often-used combinations: Option Default Applied DefaultScope Static or instance DefaultAccessor Virtual, non-virtual, or abstract. DefaultVisibility Public or protected. AllScope Static or instance AllAccessor Virtual, non-virtual, or abstract. AllVisibility Public, protected, private or internal. All Combines AllScope , AllAccessor , and AllVisibility Obtain Property Information ProperytInfo can be obtained from an object using any of the following: The static ReflectionHelper.GetPropertyInfo() generic methods The GetPropertyInfo() extension method of Type The GetPropertyInfo() extension method of TypeInfo The following example demonstrates how to obtain property metadata based on a class type. public class Person { private string FullName { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } } // obtains all property information using the default binding options var allInfo = ReflectionHelper.GetPropertyInfo<Person>(); // obtains property information for 'FirstName' (uses default binding options) var firstNameInfo = ReflectionHelper.GetPropertyInfo<Person>(\"FirstName\"); // obtains property information for the private property called 'FullName' var fullNameInfo = ReflectionHelper .GetPropertyInfo<Person>(BindingOptions.Private) .Single(item => item.Name == \"FullName\"); The following example demonstrates how to achieve property information from a class instance using the Type extension method: var person = new Person(); var ageInfo = person.GetType().GetPropertyInfo(\"Age\"); Obtain Method Information MethodInfo can be obtained from an object using any of the following: The static ReflectionHelper.GetMethodInfo() generic methods The GetMethodInfo() extension method of Type The following example demonstrates how to obtain method metadata based on a class type. public class Person { public string FirstName { get; set; } public string LastName { get; set; } public string GetFullName() => $\"{FirstName} {LastName}\"; } // obtains method metadata for 'GetFullName' using default binding options var fullNameInfo = ReflectionHelper .GetMethodInfo<Person>() .Single(item => item.Name == \"GetFullName\"); Convert an object to a Dictionary<string, object> Property names and their values can be converted to a dictionary as shown in the following example: public class Person { public string FirstName { get; set; } public string MiddleName { get; set; } public string LastName { get; set; } } var person = new Person { FirstName = \"Malcolm\", LastName = \"Smith\" }; // contains FirstName and LastName // excludes null values and uses default binding options var nonNullProperties = person.ToPropertyDictionary(); // contains FirstName, MiddleName and LastName // includes null values and uses default binding options var allProperties = person.ToPropertyDictionary(true);"
  }
}