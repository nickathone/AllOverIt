{
  "api/AllOverIt.Expressions.Info.IExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.IExpressionInfo.html",
    "title": "Interface IExpressionInfo | AllOverIt",
    "keywords": "Interface IExpressionInfo Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public interface IExpressionInfo Properties Expression Declaration Expression Expression { get; } Property Value Type Description Expression InfoType Declaration ExpressionInfoType InfoType { get; } Property Value Type Description ExpressionInfoType Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.IExpressionValue.html": {
    "href": "api/AllOverIt.Expressions.IExpressionValue.html",
    "title": "Interface IExpressionValue | AllOverIt",
    "keywords": "Interface IExpressionValue Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public interface IExpressionValue Properties Value Declaration object Value { get; } Property Value Type Description System.Object Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "library/intro.html": {
    "href": "library/intro.html",
    "title": "Add your introductions here! | AllOverIt",
    "keywords": "Add your introductions here!"
  },
  "api/AllOverIt.Expressions.IExpressionParser.html": {
    "href": "api/AllOverIt.Expressions.IExpressionParser.html",
    "title": "Interface IExpressionParser | AllOverIt",
    "keywords": "Interface IExpressionParser Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public interface IExpressionParser Methods Parse(Expression) Declaration IExpressionInfo Parse(Expression expression) Parameters Type Name Description Expression expression Returns Type Description IExpressionInfo Parse(Expression, ExpressionInfoType) Declaration IExpressionInfo Parse(Expression expression, ExpressionInfoType filter) Parameters Type Name Description Expression expression ExpressionInfoType filter Returns Type Description IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Bindings.BindingOptions.html": {
    "href": "api/AllOverIt.Bindings.BindingOptions.html",
    "title": "Enum BindingOptions | AllOverIt",
    "keywords": "Enum BindingOptions Namespace : AllOverIt.Bindings Assembly : AllOverIt.dll Syntax public enum BindingOptions : int Fields Name Description Abstract All AllAccessor AllScope AllVisibility Default DefaultAccessor DefaultScope DefaultVisibility Instance Internal NonVirtual Private Protected Public Static Virtual Extension Methods ObjectExtensions.CalculateHashCode<BindingOptions>(IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<BindingOptions>(Func<BindingOptions, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.ExpressionInfoType.html": {
    "href": "api/AllOverIt.Expressions.Info.ExpressionInfoType.html",
    "title": "Enum ExpressionInfoType | AllOverIt",
    "keywords": "Enum ExpressionInfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public enum ExpressionInfoType : int Fields Name Description BinaryComparison Conditional Constant Field MemberInit MethodCall New Property Extension Methods ObjectExtensions.CalculateHashCode<ExpressionInfoType>(IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<ExpressionInfoType>(Func<ExpressionInfoType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.INegatableExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.INegatableExpressionInfo.html",
    "title": "Interface INegatableExpressionInfo | AllOverIt",
    "keywords": "Interface INegatableExpressionInfo Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public interface INegatableExpressionInfo Properties IsNegated Declaration bool IsNegated { get; } Property Value Type Description System.Boolean Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.FieldExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.FieldExpressionInfo.html",
    "title": "Class FieldExpressionInfo | AllOverIt",
    "keywords": "Class FieldExpressionInfo Inheritance System.Object ExpressionInfoBase FieldExpressionInfo Implements IExpressionInfo IExpressionValue INegatableExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class FieldExpressionInfo : ExpressionInfoBase, IExpressionInfo, IExpressionValue, INegatableExpressionInfo Constructors FieldExpressionInfo(Expression, FieldInfo, Object, Boolean) Declaration public FieldExpressionInfo(Expression expression, FieldInfo fieldInfo, object value, bool isNegated) Parameters Type Name Description Expression expression FieldInfo fieldInfo System.Object value System.Boolean isNegated Properties FieldInfo Declaration public FieldInfo FieldInfo { get; } Property Value Type Description FieldInfo IsNegated Declaration public bool IsNegated { get; } Property Value Type Description System.Boolean Value Declaration public object Value { get; } Property Value Type Description System.Object Implements IExpressionInfo IExpressionValue INegatableExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.MethodCallExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.MethodCallExpressionInfo.html",
    "title": "Class MethodCallExpressionInfo | AllOverIt",
    "keywords": "Class MethodCallExpressionInfo Inheritance System.Object ExpressionInfoBase MethodCallExpressionInfo Implements IExpressionInfo INegatableExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class MethodCallExpressionInfo : ExpressionInfoBase, IExpressionInfo, INegatableExpressionInfo Constructors MethodCallExpressionInfo(Expression, IExpressionInfo, MethodInfo, IEnumerable<IExpressionInfo>, Boolean) Declaration public MethodCallExpressionInfo(Expression expression, IExpressionInfo object, MethodInfo methodInfo, IEnumerable<IExpressionInfo> parameters, bool isNegated) Parameters Type Name Description Expression expression IExpressionInfo object MethodInfo methodInfo IEnumerable < IExpressionInfo > parameters System.Boolean isNegated Properties IsNegated Declaration public bool IsNegated { get; } Property Value Type Description System.Boolean MethodInfo Declaration public MethodInfo MethodInfo { get; } Property Value Type Description MethodInfo Object Declaration public IExpressionInfo Object { get; } Property Value Type Description IExpressionInfo Parameters Declaration public IEnumerable<IExpressionInfo> Parameters { get; } Property Value Type Description IEnumerable < IExpressionInfo > Implements IExpressionInfo INegatableExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Extensions.PropertyInfoExtensions.html": {
    "href": "api/AllOverIt.Extensions.PropertyInfoExtensions.html",
    "title": "Class PropertyInfoExtensions | AllOverIt",
    "keywords": "Class PropertyInfoExtensions Inheritance System.Object PropertyInfoExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class PropertyInfoExtensions : object Methods IsAbstract(PropertyInfo) Declaration public static bool IsAbstract(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description System.Boolean IsInternal(PropertyInfo) Declaration public static bool IsInternal(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description System.Boolean IsPrivate(PropertyInfo) Declaration public static bool IsPrivate(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description System.Boolean IsProtected(PropertyInfo) Declaration public static bool IsProtected(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description System.Boolean IsPublic(PropertyInfo) Declaration public static bool IsPublic(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description System.Boolean IsStatic(PropertyInfo) Declaration public static bool IsStatic(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description System.Boolean IsVirtual(PropertyInfo) Declaration public static bool IsVirtual(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description System.Boolean"
  },
  "api/AllOverIt.Extensions.ExpressionExtensions.html": {
    "href": "api/AllOverIt.Extensions.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions | AllOverIt",
    "keywords": "Class ExpressionExtensions Inheritance System.Object ExpressionExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class ExpressionExtensions : object Methods GetValue(Expression) Declaration public static object GetValue(this Expression expression) Parameters Type Name Description Expression expression Returns Type Description System.Object GetValues(IEnumerable<Expression>) Declaration public static IEnumerable<object> GetValues(this IEnumerable<Expression> expressions) Parameters Type Name Description IEnumerable < Expression > expressions Returns Type Description IEnumerable < System.Object >"
  },
  "api/AllOverIt.Expressions.Info.NewExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.NewExpressionInfo.html",
    "title": "Class NewExpressionInfo | AllOverIt",
    "keywords": "Class NewExpressionInfo Inheritance System.Object ExpressionInfoBase NewExpressionInfo Implements IExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class NewExpressionInfo : ExpressionInfoBase, IExpressionInfo Constructors NewExpressionInfo(Expression, IEnumerable<IExpressionInfo>) Declaration public NewExpressionInfo(Expression expression, IEnumerable<IExpressionInfo> arguments) Parameters Type Name Description Expression expression IEnumerable < IExpressionInfo > arguments Properties Arguments Declaration public IReadOnlyList<IExpressionInfo> Arguments { get; } Property Value Type Description IReadOnlyList < IExpressionInfo > Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Extensions.TypeInfoExtensions.html": {
    "href": "api/AllOverIt.Extensions.TypeInfoExtensions.html",
    "title": "Class TypeInfoExtensions | AllOverIt",
    "keywords": "Class TypeInfoExtensions Inheritance System.Object TypeInfoExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class TypeInfoExtensions : object Methods GetPropertyInfo(TypeInfo, Boolean) Gets all (property metadata) for a given . Declaration public static IEnumerable<PropertyInfo> GetPropertyInfo(this TypeInfo typeInfo, bool declaredOnly = false) Parameters Type Name Description TypeInfo typeInfo The to obtain all property metadata. System.Boolean declaredOnly If true, the metadata of properties in the declared class as well as base class(es) are returned. If false, only property metadata of the declared type is returned. Returns Type Description IEnumerable < PropertyInfo > The property metadata, as , of a provided . Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by . GetPropertyInfo(TypeInfo, String) Gets the (property metadata) for a given property on a . Declaration public static PropertyInfo GetPropertyInfo(this TypeInfo typeInfo, string propertyName) Parameters Type Name Description TypeInfo typeInfo The to obtain the property metadata from. System.String propertyName The name of the property to obtain metadata for. Returns Type Description PropertyInfo The property metadata, as , of a specified property on the provided . Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by ."
  },
  "api/AllOverIt.Expressions.PredicateBuilder.html": {
    "href": "api/AllOverIt.Expressions.PredicateBuilder.html",
    "title": "Class PredicateBuilder | AllOverIt",
    "keywords": "Class PredicateBuilder Inheritance System.Object PredicateBuilder Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public static class PredicateBuilder : object Methods And<TType>(Expression<Func<TType, Boolean>>, Expression<Func<TType, Boolean>>) Declaration public static Expression<Func<TType, bool>> And<TType>(this Expression<Func<TType, bool>> expression1, Expression<Func<TType, bool>> expression2) Parameters Type Name Description Expression < Func <TType, System.Boolean >> expression1 Expression < Func <TType, System.Boolean >> expression2 Returns Type Description Expression < Func <TType, System.Boolean >> Type Parameters Name Description TType False<TType>() Declaration public static Expression<Func<TType, bool>> False<TType>() Returns Type Description Expression < Func <TType, System.Boolean >> Type Parameters Name Description TType Not<TType>(Expression<Func<TType, Boolean>>) Declaration public static Expression<Func<TType, bool>> Not<TType>(this Expression<Func<TType, bool>> expression) Parameters Type Name Description Expression < Func <TType, System.Boolean >> expression Returns Type Description Expression < Func <TType, System.Boolean >> Type Parameters Name Description TType Or<TType>(Expression<Func<TType, Boolean>>, Expression<Func<TType, Boolean>>) Declaration public static Expression<Func<TType, bool>> Or<TType>(this Expression<Func<TType, bool>> expression1, Expression<Func<TType, bool>> expression2) Parameters Type Name Description Expression < Func <TType, System.Boolean >> expression1 Expression < Func <TType, System.Boolean >> expression2 Returns Type Description Expression < Func <TType, System.Boolean >> Type Parameters Name Description TType True<TType>() Declaration public static Expression<Func<TType, bool>> True<TType>() Returns Type Description Expression < Func <TType, System.Boolean >> Type Parameters Name Description TType Where<TType>(Expression<Func<TType, Boolean>>) Declaration public static Expression<Func<TType, bool>> Where<TType>(Expression<Func<TType, bool>> expression) Parameters Type Name Description Expression < Func <TType, System.Boolean >> expression Returns Type Description Expression < Func <TType, System.Boolean >> Type Parameters Name Description TType Where<TType>(Boolean) Declaration public static Expression<Func<TType, bool>> Where<TType>(bool initialState) Parameters Type Name Description System.Boolean initialState Returns Type Description Expression < Func <TType, System.Boolean >> Type Parameters Name Description TType"
  },
  "api/AllOverIt.Extensions.DoubleExtensions.html": {
    "href": "api/AllOverIt.Extensions.DoubleExtensions.html",
    "title": "Class DoubleExtensions | AllOverIt",
    "keywords": "Class DoubleExtensions Inheritance System.Object DoubleExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class DoubleExtensions : object Methods IsEqualTo(Double, Double) Declaration public static bool IsEqualTo(this double lhs, double rhs) Parameters Type Name Description System.Double lhs System.Double rhs Returns Type Description System.Boolean IsZero(Double) Declaration public static bool IsZero(this double value) Parameters Type Name Description System.Double value Returns Type Description System.Boolean"
  },
  "api/AllOverIt.Helpers.Raii-1.html": {
    "href": "api/AllOverIt.Helpers.Raii-1.html",
    "title": "Class Raii<TType> | AllOverIt",
    "keywords": "Class Raii<TType> A strongly-type disposable object implementing the Resource Acquisition Is Initialization idiom. Inheritance System.Object Raii<TType> Namespace : AllOverIt.Helpers Assembly : AllOverIt.dll Syntax public class Raii<TType> : IDisposable Type Parameters Name Description TType The type being initialized. Constructors Raii(Func<TType>, Action<TType>) Constructor used to provide the initialization and cleanup actions to be invoked. Declaration public Raii(Func<TType> initialize, Action<TType> cleanUp) Parameters Type Name Description Func <TType> initialize The initialization action to invoke at the time of initialization. Action <TType> cleanUp The cleanup action to perform when the object is disposed. Properties Context Declaration protected TType Context { get; } Property Value Type Description TType Methods Dispose() This is called when the instance is being disposed. Declaration public void Dispose() Dispose(Boolean) A virtual method that is called at the time of disposal. For this class, the cleanup action provided at the time of construction is invoked. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Is true when the object is being disposed, otherwise false. Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Helpers.Raii.html": {
    "href": "api/AllOverIt.Helpers.Raii.html",
    "title": "Class Raii | AllOverIt",
    "keywords": "Class Raii A disposable object implementing the Resource Acquisition Is Initialization idiom. Inheritance System.Object Raii Namespace : AllOverIt.Helpers Assembly : AllOverIt.dll Syntax public class Raii : IDisposable Constructors Raii(Action, Action) Constructor used to provide the initialization and cleanup actions to be invoked. Declaration public Raii(Action initialize, Action cleanUp) Parameters Type Name Description Action initialize The initialization action to invoke at the time of initialization. Action cleanUp The cleanup action to perform when the object is disposed. Methods Dispose() This is called when the instance is being disposed. Declaration public void Dispose() Dispose(Boolean) A virtual method that is called at the time of disposal. For this class, the cleanup action provided at the time of construction is invoked. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Is true when the object is being disposed, otherwise false. Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.ExpressionInfoBase.html": {
    "href": "api/AllOverIt.Expressions.Info.ExpressionInfoBase.html",
    "title": "Class ExpressionInfoBase | AllOverIt",
    "keywords": "Class ExpressionInfoBase Inheritance System.Object ExpressionInfoBase BinaryComparisonExpressionInfo ConditionalExpressionInfo ConstantExpressionInfo FieldExpressionInfo MemberInitExpressionInfo MethodCallExpressionInfo NewExpressionInfo PropertyExpressionInfo Implements IExpressionInfo Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public abstract class ExpressionInfoBase : object, IExpressionInfo Constructors ExpressionInfoBase(Expression, ExpressionInfoType) Declaration protected ExpressionInfoBase(Expression expression, ExpressionInfoType infoType) Parameters Type Name Description Expression expression ExpressionInfoType infoType Properties Expression Declaration public Expression Expression { get; } Property Value Type Description Expression InfoType Declaration public ExpressionInfoType InfoType { get; } Property Value Type Description ExpressionInfoType Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.PropertyExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.PropertyExpressionInfo.html",
    "title": "Class PropertyExpressionInfo | AllOverIt",
    "keywords": "Class PropertyExpressionInfo Inheritance System.Object ExpressionInfoBase PropertyExpressionInfo Implements IExpressionInfo IExpressionValue INegatableExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class PropertyExpressionInfo : ExpressionInfoBase, IExpressionInfo, IExpressionValue, INegatableExpressionInfo Constructors PropertyExpressionInfo(Expression, PropertyInfo, Object, Boolean) Declaration public PropertyExpressionInfo(Expression expression, PropertyInfo propertyInfo, object value, bool isNegated) Parameters Type Name Description Expression expression PropertyInfo propertyInfo System.Object value System.Boolean isNegated Properties IsNegated Declaration public bool IsNegated { get; } Property Value Type Description System.Boolean PropertyInfo Declaration public PropertyInfo PropertyInfo { get; } Property Value Type Description PropertyInfo Value Declaration public object Value { get; } Property Value Type Description System.Object Implements IExpressionInfo IExpressionValue INegatableExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Helpers.EnumHelper.html": {
    "href": "api/AllOverIt.Helpers.EnumHelper.html",
    "title": "Class EnumHelper | AllOverIt",
    "keywords": "Class EnumHelper Provides static, general purpose, methods related to using Enums. Inheritance System.Object EnumHelper Namespace : AllOverIt.Helpers Assembly : AllOverIt.dll Syntax public static class EnumHelper : object Methods GetEnumValues<TType>() Returns all possible enum values. Declaration public static IReadOnlyCollection<TType> GetEnumValues<TType>() where TType : struct, Enum Returns Type Description IReadOnlyCollection <TType> All possible enum values. Type Parameters Name Description TType The Enum type."
  },
  "api/AllOverIt.Expressions.Info.MemberInitExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.MemberInitExpressionInfo.html",
    "title": "Class MemberInitExpressionInfo | AllOverIt",
    "keywords": "Class MemberInitExpressionInfo Inheritance System.Object ExpressionInfoBase MemberInitExpressionInfo Implements IExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class MemberInitExpressionInfo : ExpressionInfoBase, IExpressionInfo Constructors MemberInitExpressionInfo(Expression, IEnumerable<IExpressionInfo>, IEnumerable<IExpressionInfo>) Declaration public MemberInitExpressionInfo(Expression expression, IEnumerable<IExpressionInfo> bindings, IEnumerable<IExpressionInfo> arguments) Parameters Type Name Description Expression expression IEnumerable < IExpressionInfo > bindings IEnumerable < IExpressionInfo > arguments Properties Arguments Declaration public IReadOnlyList<IExpressionInfo> Arguments { get; } Property Value Type Description IReadOnlyList < IExpressionInfo > Bindings Declaration public IReadOnlyList<IExpressionInfo> Bindings { get; } Property Value Type Description IReadOnlyList < IExpressionInfo > Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Extensions.TaskEx.html": {
    "href": "api/AllOverIt.Extensions.TaskEx.html",
    "title": "Class TaskEx | AllOverIt",
    "keywords": "Class TaskEx Inheritance System.Object TaskEx Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class TaskEx : object Methods SafeFireAndForget(Task, Boolean, Action<Exception>) Declaration public static void SafeFireAndForget(this Task task, bool continueOnCapturedContext = true, Action<Exception> exceptionHandler = null) Parameters Type Name Description Task task System.Boolean continueOnCapturedContext Action < Exception > exceptionHandler SetDefaultExceptionHandler(Action<Exception>) Declaration public static void SetDefaultExceptionHandler(Action<Exception> exceptionHandler) Parameters Type Name Description Action < Exception > exceptionHandler WhenAll<T1, T2>(Task<T1>, Task<T2>) Declaration public static Task<(T1, T2)> WhenAll<T1, T2>(Task<T1> task1, Task<T2> task2) Parameters Type Name Description Task <T1> task1 Task <T2> task2 Returns Type Description Task < System.ValueTuple <T1, T2>> Type Parameters Name Description T1 T2 WhenAll<T1, T2, T3>(Task<T1>, Task<T2>, Task<T3>) Declaration public static Task<(T1, T2, T3)> WhenAll<T1, T2, T3>(Task<T1> task1, Task<T2> task2, Task<T3> task3) Parameters Type Name Description Task <T1> task1 Task <T2> task2 Task <T3> task3 Returns Type Description Task < System.ValueTuple <T1, T2, T3>> Type Parameters Name Description T1 T2 T3 WhenAll<T1, T2, T3, T4>(Task<T1>, Task<T2>, Task<T3>, Task<T4>) Declaration public static Task<(T1, T2, T3, T4)> WhenAll<T1, T2, T3, T4>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4) Parameters Type Name Description Task <T1> task1 Task <T2> task2 Task <T3> task3 Task <T4> task4 Returns Type Description Task < System.ValueTuple <T1, T2, T3, T4>> Type Parameters Name Description T1 T2 T3 T4 WhenAll<T1, T2, T3, T4, T5>(Task<T1>, Task<T2>, Task<T3>, Task<T4>, Task<T5>) Declaration public static Task<(T1, T2, T3, T4, T5)> WhenAll<T1, T2, T3, T4, T5>(Task<T1> task1, Task<T2> task2, Task<T3> task3, Task<T4> task4, Task<T5> task5) Parameters Type Name Description Task <T1> task1 Task <T2> task2 Task <T3> task3 Task <T4> task4 Task <T5> task5 Returns Type Description Task < System.ValueTuple <T1, T2, T3, T4, T5>> Type Parameters Name Description T1 T2 T3 T4 T5"
  },
  "api/AllOverIt.Extensions.TypeExtensions.html": {
    "href": "api/AllOverIt.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | AllOverIt",
    "keywords": "Class TypeExtensions Inheritance System.Object TypeExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class TypeExtensions : object Methods GetFriendlyName(Type) Declaration public static string GetFriendlyName(this Type type) Parameters Type Name Description Type type Returns Type Description System.String GetGenericArguments(Type) Declaration public static IEnumerable<Type> GetGenericArguments(this Type type) Parameters Type Name Description Type type Returns Type Description IEnumerable < Type > GetMethods(Type, BindingOptions, Boolean) Declaration public static IEnumerable<MethodInfo> GetMethods(this Type type, BindingOptions binding = default(BindingOptions), bool declaredOnly = false) Parameters Type Name Description Type type BindingOptions binding System.Boolean declaredOnly Returns Type Description IEnumerable < MethodInfo > GetPropertyInfo(Type, BindingOptions, Boolean) Gets (property metadata) for a given and binding option. Declaration public static IEnumerable<PropertyInfo> GetPropertyInfo(this Type type, BindingOptions binding = default(BindingOptions), bool declaredOnly = false) Parameters Type Name Description Type type The type to obtain property metadata for. BindingOptions binding The binding option that determines the scope, access, and visibility rules to apply when searching for the metadata. System.Boolean declaredOnly If true, the metadata of properties in the declared class as well as base class(es) are returned. If false, only property metadata of the declared type is returned. Returns Type Description IEnumerable < PropertyInfo > The property metadata, as , of a provided . Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by . GetPropertyInfo(Type, String) Gets the (property metadata) for a given property on a . Declaration public static PropertyInfo GetPropertyInfo(this Type type, string propertyName) Parameters Type Name Description Type type The to obtain the property metadata from. System.String propertyName The name of the property to obtain metadata for. Returns Type Description PropertyInfo The property metadata, as , of a specified property on the provided . Remarks When class inheritance is involved, this method returns the first property found, starting at the type represented by . IsAssignableFromType(Type, Type) Declaration public static bool IsAssignableFromType(this Type type, Type fromType) Parameters Type Name Description Type type Type fromType Returns Type Description System.Boolean IsClassType(Type) Declaration public static bool IsClassType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean IsEnumerableType(Type, Boolean) Declaration public static bool IsEnumerableType(this Type type, bool includeString = false) Parameters Type Name Description Type type System.Boolean includeString Returns Type Description System.Boolean IsEnumType(Type) Declaration public static bool IsEnumType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean IsGenericEnumerableType(Type) Declaration public static bool IsGenericEnumerableType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean IsGenericNullableType(Type) Declaration public static bool IsGenericNullableType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean IsGenericType(Type) Declaration public static bool IsGenericType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean IsIntegralType(Type) Declaration public static bool IsIntegralType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean IsPrimitiveType(Type) Declaration public static bool IsPrimitiveType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean"
  },
  "api/AllOverIt.Extensions.ComparableExtensions.html": {
    "href": "api/AllOverIt.Extensions.ComparableExtensions.html",
    "title": "Class ComparableExtensions | AllOverIt",
    "keywords": "Class ComparableExtensions Inheritance System.Object ComparableExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class ComparableExtensions : object Methods EqualTo<TType>(IComparable<TType>, TType) Declaration public static bool EqualTo<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType GreaterThan<TType>(IComparable<TType>, TType) Declaration public static bool GreaterThan<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType GreaterThanOrEqual<TType>(IComparable<TType>, TType) Declaration public static bool GreaterThanOrEqual<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType LessThan<TType>(IComparable<TType>, TType) Declaration public static bool LessThan<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType LessThanOrEqual<TType>(IComparable<TType>, TType) Declaration public static bool LessThanOrEqual<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType NotEqualTo<TType>(IComparable<TType>, TType) Declaration public static bool NotEqualTo<TType>(this IComparable<TType> comparable, TType other) Parameters Type Name Description IComparable <TType> comparable TType other Returns Type Description System.Boolean Type Parameters Name Description TType"
  },
  "api/AllOverIt.Extensions.DictionaryExtensions.html": {
    "href": "api/AllOverIt.Extensions.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | AllOverIt",
    "keywords": "Class DictionaryExtensions Inheritance System.Object DictionaryExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class DictionaryExtensions : object Methods GetOrSet<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) Declaration public static TValue GetOrSet<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TValue> valueCreator) Parameters Type Name Description IDictionary <TKey, TValue> dictionary TKey key Func <TValue> valueCreator Returns Type Description TValue Type Parameters Name Description TKey TValue GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue = null) Parameters Type Name Description IDictionary <TKey, TValue> dictionary TKey key TValue defaultValue Returns Type Description TValue Type Parameters Name Description TKey TValue"
  },
  "api/AllOverIt.Expressions.Info.ConstantExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.ConstantExpressionInfo.html",
    "title": "Class ConstantExpressionInfo | AllOverIt",
    "keywords": "Class ConstantExpressionInfo Inheritance System.Object ExpressionInfoBase ConstantExpressionInfo Implements IExpressionInfo IExpressionValue Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class ConstantExpressionInfo : ExpressionInfoBase, IExpressionInfo, IExpressionValue Constructors ConstantExpressionInfo(Expression, Object) Declaration public ConstantExpressionInfo(Expression expression, object value) Parameters Type Name Description Expression expression System.Object value Properties Value Declaration public object Value { get; } Property Value Type Description System.Object Implements IExpressionInfo IExpressionValue Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.ConditionalExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.ConditionalExpressionInfo.html",
    "title": "Class ConditionalExpressionInfo | AllOverIt",
    "keywords": "Class ConditionalExpressionInfo Inheritance System.Object ExpressionInfoBase ConditionalExpressionInfo Implements IExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class ConditionalExpressionInfo : ExpressionInfoBase, IExpressionInfo Constructors ConditionalExpressionInfo(Expression, IExpressionInfo, IExpressionInfo, IExpressionInfo) Declaration public ConditionalExpressionInfo(Expression expression, IExpressionInfo test, IExpressionInfo ifTrue, IExpressionInfo ifFalse) Parameters Type Name Description Expression expression IExpressionInfo test IExpressionInfo ifTrue IExpressionInfo ifFalse Properties IfFalse Declaration public IExpressionInfo IfFalse { get; } Property Value Type Description IExpressionInfo IfTrue Declaration public IExpressionInfo IfTrue { get; } Property Value Type Description IExpressionInfo Test Declaration public IExpressionInfo Test { get; } Property Value Type Description IExpressionInfo Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.ExpressionParser.html": {
    "href": "api/AllOverIt.Expressions.ExpressionParser.html",
    "title": "Class ExpressionParser | AllOverIt",
    "keywords": "Class ExpressionParser Inheritance System.Object ExpressionParser Implements IExpressionParser Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public sealed class ExpressionParser : object, IExpressionParser Methods Parse(Expression) Declaration public IExpressionInfo Parse(Expression expression) Parameters Type Name Description Expression expression Returns Type Description IExpressionInfo Parse(Expression, ExpressionInfoType) Declaration public IExpressionInfo Parse(Expression expression, ExpressionInfoType filter) Parameters Type Name Description Expression expression ExpressionInfoType filter Returns Type Description IExpressionInfo Implements IExpressionParser Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Info.BinaryComparisonExpressionInfo.html": {
    "href": "api/AllOverIt.Expressions.Info.BinaryComparisonExpressionInfo.html",
    "title": "Class BinaryComparisonExpressionInfo | AllOverIt",
    "keywords": "Class BinaryComparisonExpressionInfo Inheritance System.Object ExpressionInfoBase BinaryComparisonExpressionInfo Implements IExpressionInfo Inherited Members ExpressionInfoBase.Expression ExpressionInfoBase.InfoType Namespace : AllOverIt.Expressions.Info Assembly : AllOverIt.dll Syntax public sealed class BinaryComparisonExpressionInfo : ExpressionInfoBase, IExpressionInfo Constructors BinaryComparisonExpressionInfo(Expression, IExpressionInfo, IExpressionInfo, ExpressionType) Declaration public BinaryComparisonExpressionInfo(Expression expression, IExpressionInfo left, IExpressionInfo right, ExpressionType operatorType) Parameters Type Name Description Expression expression IExpressionInfo left IExpressionInfo right ExpressionType operatorType Properties Left Declaration public IExpressionInfo Left { get; } Property Value Type Description IExpressionInfo OperatorType Declaration public ExpressionType OperatorType { get; } Property Value Type Description ExpressionType Right Declaration public IExpressionInfo Right { get; } Property Value Type Description IExpressionInfo Implements IExpressionInfo Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/AllOverIt.Expressions.Exceptions.html": {
    "href": "api/AllOverIt.Expressions.Exceptions.html",
    "title": "Namespace AllOverIt.Expressions.Exceptions | AllOverIt",
    "keywords": "Namespace AllOverIt.Expressions.Exceptions Classes ExpressionParserException"
  },
  "api/AllOverIt.Expressions.html": {
    "href": "api/AllOverIt.Expressions.html",
    "title": "Namespace AllOverIt.Expressions | AllOverIt",
    "keywords": "Namespace AllOverIt.Expressions Classes ExpressionParser ParameterRebinder PredicateBuilder Interfaces IExpressionParser IExpressionValue"
  },
  "api/AllOverIt.Helpers.html": {
    "href": "api/AllOverIt.Helpers.html",
    "title": "Namespace AllOverIt.Helpers | AllOverIt",
    "keywords": "Namespace AllOverIt.Helpers Classes EnumHelper Provides static, general purpose, methods related to using Enums. Raii A disposable object implementing the Resource Acquisition Is Initialization idiom. Raii<TType> A strongly-type disposable object implementing the Resource Acquisition Is Initialization idiom."
  },
  "api/AllOverIt.Bindings.html": {
    "href": "api/AllOverIt.Bindings.html",
    "title": "Namespace AllOverIt.Bindings | AllOverIt",
    "keywords": "Namespace AllOverIt.Bindings Classes BindingOptionsHelper Enums BindingOptions"
  },
  "api/AllOverIt.Expressions.Info.html": {
    "href": "api/AllOverIt.Expressions.Info.html",
    "title": "Namespace AllOverIt.Expressions.Info | AllOverIt",
    "keywords": "Namespace AllOverIt.Expressions.Info Classes BinaryComparisonExpressionInfo ConditionalExpressionInfo ConstantExpressionInfo ExpressionInfoBase FieldExpressionInfo MemberInitExpressionInfo MethodCallExpressionInfo NewExpressionInfo PropertyExpressionInfo Interfaces IExpressionInfo INegatableExpressionInfo Enums ExpressionInfoType"
  },
  "api/AllOverIt.Extensions.html": {
    "href": "api/AllOverIt.Extensions.html",
    "title": "Namespace AllOverIt.Extensions | AllOverIt",
    "keywords": "Namespace AllOverIt.Extensions Classes ComparableExtensions DictionaryExtensions DoubleExtensions EnumerableExtensions ExpressionExtensions ObjectExtensions PropertyInfoExtensions StringExtensions TaskEx TypeExtensions TypeInfoExtensions"
  },
  "api/AllOverIt.Extensions.StringExtensions.html": {
    "href": "api/AllOverIt.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | AllOverIt",
    "keywords": "Class StringExtensions Inheritance System.Object StringExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class StringExtensions : object Methods As<TType>(String, TType, Boolean) Converts a given string to another type. Declaration public static TType As<TType>(this string value, TType defaultValue = null, bool ignoreCase = true) Parameters Type Name Description System.String value The value to be converted. TType defaultValue The value to return if is null, empty or contains whitespace, or is considered invalid for the TType converter. System.Boolean ignoreCase Indicates if the conversion should ignore case-sensitivity. Returns Type Description TType The converted value, or the value if the conversion cannot be performed. Type Parameters Name Description TType The type to convert to. Remarks Supported conversions include byte, sbyte, decimal, double, float, int, uint, long, ulong, short, ushort, string and enum. Char and Boolean type conversions must be performed using the As<TType>(Object, TType) method. No attempt is made to avoid overflow or argument exceptions. AsNullable<TType>(String, Boolean) Converts a given string to another nullable type. Declaration public static TType? AsNullable<TType>(this string value, bool ignoreCase = true) where TType : struct Parameters Type Name Description System.String value The value to be converted. System.Boolean ignoreCase Indicates if the conversion should ignore case-sensitivity. Returns Type Description System.Nullable <TType> The converted value, or null if the conversion cannot be performed. Type Parameters Name Description TType The nullable type to convert to."
  },
  "api/AllOverIt.Expressions.ParameterRebinder.html": {
    "href": "api/AllOverIt.Expressions.ParameterRebinder.html",
    "title": "Class ParameterRebinder | AllOverIt",
    "keywords": "Class ParameterRebinder Inheritance System.Object ParameterRebinder Namespace : AllOverIt.Expressions Assembly : AllOverIt.dll Syntax public class ParameterRebinder : ExpressionVisitor Methods ReplaceParameters(IDictionary<ParameterExpression, ParameterExpression>, Expression) Replaces parameter expressions in a lambda expression with alternate parameter expressions in the provided mapping. Declaration public static Expression ReplaceParameters(IDictionary<ParameterExpression, ParameterExpression> parameterMap, Expression expression) Parameters Type Name Description IDictionary < ParameterExpression , ParameterExpression > parameterMap Contains the mapping of parameter expressions to replace in the provided lambda expression. Expression expression The lambda expression to have its parameter expressions replaced. Returns Type Description Expression A new expression with the parameter expressions replaced. VisitParameter(ParameterExpression) Declaration protected override Expression VisitParameter(ParameterExpression parameter) Parameters Type Name Description ParameterExpression parameter Returns Type Description Expression Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "index.html": {
    "href": "index.html",
    "title": "AllOverIt | AllOverIt",
    "keywords": "AllOverIt A general purpose library containing a variety of classes, utilities, and helpers to fill in regularly occuring software development gaps. Reflection with flexible binding options Expressions General purpose extension methods Often-used utilities"
  },
  "api/AllOverIt.Bindings.BindingOptionsHelper.html": {
    "href": "api/AllOverIt.Bindings.BindingOptionsHelper.html",
    "title": "Class BindingOptionsHelper | AllOverIt",
    "keywords": "Class BindingOptionsHelper Inheritance System.Object BindingOptionsHelper Namespace : AllOverIt.Bindings Assembly : AllOverIt.dll Syntax public static class BindingOptionsHelper : object"
  },
  "api/AllOverIt.Extensions.EnumerableExtensions.html": {
    "href": "api/AllOverIt.Extensions.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | AllOverIt",
    "keywords": "Class EnumerableExtensions Inheritance System.Object EnumerableExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class EnumerableExtensions : object Methods AsList<TType>(IEnumerable<TType>) Declaration public static IList<TType> AsList<TType>(this IEnumerable<TType> items) Parameters Type Name Description IEnumerable <TType> items Returns Type Description IList <TType> Type Parameters Name Description TType AsReadOnlyList<TType>(IEnumerable<TType>) Declaration public static IReadOnlyList<TType> AsReadOnlyList<TType>(this IEnumerable<TType> items) Parameters Type Name Description IEnumerable <TType> items Returns Type Description IReadOnlyList <TType> Type Parameters Name Description TType"
  },
  "api/AllOverIt.Extensions.ObjectExtensions.html": {
    "href": "api/AllOverIt.Extensions.ObjectExtensions.html",
    "title": "Class ObjectExtensions | AllOverIt",
    "keywords": "Class ObjectExtensions Inheritance System.Object ObjectExtensions Namespace : AllOverIt.Extensions Assembly : AllOverIt.dll Syntax public static class ObjectExtensions : object Properties DefaultHashCodeBindings Specifies the binding options to use when calculating the hash code of an object when using . Declaration public static BindingOptions DefaultHashCodeBindings { get; set; } Property Value Type Description BindingOptions Methods As<TType>(Object, TType) Converts the provided source instance to a specified type. Declaration public static TType As<TType>(this object instance, TType defaultValue = null) Parameters Type Name Description System.Object instance The object instance to be converted. TType defaultValue The default value to be returned when instance is null. Returns Type Description TType Returns instance converted to the specified . Type Parameters Name Description TType The type that instance is to be converted to. AsNullable<TType>(Object, Nullable<TType>) Converts the provided source instance to a specified nullable type. Declaration public static TType? AsNullable<TType>(this object instance, TType? defaultValue = null) where TType : struct Parameters Type Name Description System.Object instance The object instance to be converted. System.Nullable <TType> defaultValue The default value to be returned when instance is null. Returns Type Description System.Nullable <TType> Returns instance converted to the specified . Type Parameters Name Description TType The (nullable) type that instance is to be converted to. CalculateHashCode<TType>(TType, Func<TType, Object>[]) Declaration public static int CalculateHashCode<TType>(this TType instance, params Func<TType, object>[] propertyResolvers) Parameters Type Name Description TType instance Func <TType, System.Object >[] propertyResolvers Returns Type Description System.Int32 Type Parameters Name Description TType CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) Declaration public static int CalculateHashCode<TType>(this TType instance, IEnumerable<string> includeProperties = null, IEnumerable<string> excludeProperties = null) Parameters Type Name Description TType instance IEnumerable < System.String > includeProperties IEnumerable < System.String > excludeProperties Returns Type Description System.Int32 Type Parameters Name Description TType IsIntegral(Object) Determines if the specified object is an integral type (signed or unsigned). Declaration public static bool IsIntegral(this object instance) Parameters Type Name Description System.Object instance The object instance to be compared to an integral type. Returns Type Description System.Boolean Returns true if the specified object is an integral type (signed or unsigned). ToPropertyDictionary(Object, Boolean, BindingOptions) Creates a dictionary containing property names and associated values. Declaration public static IDictionary<string, object> ToPropertyDictionary(this object instance, bool includeNulls = false, BindingOptions bindingOptions = default(BindingOptions)) Parameters Type Name Description System.Object instance The object instance to obtain property names and values from. System.Boolean includeNulls If true then null value properties will be returned, otherwise they will be omitted. BindingOptions bindingOptions Binding options that determines how property names are resolved. Returns Type Description IDictionary < System.String , System.Object > Returns a dictionary containing property names and associated values."
  },
  "api/AllOverIt.Expressions.Exceptions.ExpressionParserException.html": {
    "href": "api/AllOverIt.Expressions.Exceptions.ExpressionParserException.html",
    "title": "Class ExpressionParserException | AllOverIt",
    "keywords": "Class ExpressionParserException Inheritance System.Object ExpressionParserException Namespace : AllOverIt.Expressions.Exceptions Assembly : AllOverIt.dll Syntax public sealed class ExpressionParserException : Exception Extension Methods ObjectExtensions.ToPropertyDictionary(Object, Boolean, BindingOptions) ObjectExtensions.IsIntegral(Object) ObjectExtensions.As<TType>(Object, TType) ObjectExtensions.AsNullable<TType>(Object, Nullable<TType>) ObjectExtensions.CalculateHashCode<TType>(TType, IEnumerable<String>, IEnumerable<String>) ObjectExtensions.CalculateHashCode<TType>(TType, Func<TType, Object>[])"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "AllOverIt | AllOverIt",
    "keywords": "AllOverIt The documentation in this section has been auto-generated from comments in the source code, available from GitHub ."
  }
}